name: Defender CLI Scan

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:

permissions:
  contents: read
  security-events: write
  actions: read
  pull-requests: write

jobs:
  defender-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: false
        tags: ${{ vars.REGISTRY_HOST }}/${{ vars.ARTIFACT_NAME }}:latest
        load: true
        cache-from: type=gha
        cache-to: type=gha,mode=max
        
    - name: Download Defender CLI
      run: |
        echo "Downloading Defender CLI" 
        #curl -L -o defender "https://dfddefendercli-afdendpoint-dogfood-ahgnapadd4eecdbr.z01.azurefd.net/public/latest/Defender_linux-x64"
        curl -L -o defender "https://aka.ms/defender-cli_linux-x64"
        test -s defender || { echo "Download failed or file empty"; exit 1; }
        chmod +x defender

    - name: List contents of directory
      run: ls -la

    - name: Run Defender Version
      run: ./defender --version
      env:
        GDN_MDC_CLI_TENANT_ID: ${{ secrets.GDN_MDC_CLI_TENANT_ID }}
        GDN_MDC_CLI_CLIENT_ID: ${{ secrets.GDN_MDC_CLI_CLIENT_ID }}
        GDN_MDC_CLI_CLIENT_SECRET: ${{ secrets.GDN_MDC_CLI_CLIENT_SECRET }}

    - name: Run Defender Help
      run: ./defender --help
      env:
        GDN_MDC_CLI_TENANT_ID: ${{ secrets.GDN_MDC_CLI_TENANT_ID }}
        GDN_MDC_CLI_CLIENT_ID: ${{ secrets.GDN_MDC_CLI_CLIENT_ID }}
        GDN_MDC_CLI_CLIENT_SECRET: ${{ secrets.GDN_MDC_CLI_CLIENT_SECRET }}
      
    - name: Run Defender CLI Scan (Default)
      run: |
        ./defender scan image vuln/testdocker:latest --scanner mdvm
      continue-on-error: true
      env:
        GDN_MDC_CLI_TENANT_ID: ${{ secrets.GDN_MDC_CLI_TENANT_ID }}
        GDN_MDC_CLI_CLIENT_ID: ${{ secrets.GDN_MDC_CLI_CLIENT_ID }}
        GDN_MDC_CLI_CLIENT_SECRET: ${{ secrets.GDN_MDC_CLI_CLIENT_SECRET }}

    - name: Run Defender CLI Scan (Built)
      run: |
        ./defender scan image '${{ vars.REGISTRY_HOST }}/${{ vars.ARTIFACT_NAME }}:latest' --scanner mdvm
      continue-on-error: true
      env:
        GDN_MDC_CLI_TENANT_ID: ${{ secrets.GDN_MDC_CLI_TENANT_ID }}
        GDN_MDC_CLI_CLIENT_ID: ${{ secrets.GDN_MDC_CLI_CLIENT_ID }}
        GDN_MDC_CLI_CLIENT_SECRET: ${{ secrets.GDN_MDC_CLI_CLIENT_SECRET }}
  
    - name: Run Quick Trivy scan (High/Critical only)
      uses: aquasecurity/trivy-action@master
      continue-on-error: true
      with:
        image-ref: '${{ vars.REGISTRY_HOST }}/${{ vars.ARTIFACT_NAME }}:latest'
        format: 'table'
        severity: 'CRITICAL,HIGH'
        exit-code: '0'  # Don't fail the build, just report

    - name: Generate Markdown from SARIF (example)
      shell: bash
      run: |
          SARIF="/home/runner/work/PM-testing/PM-testing/defender.sarif"
          # Put or download your SARIF file at $SARIF before this step if needed.

          jq -r '
            def normsev($r):
              ( ($r.properties.severity // $r.properties.severityLevel // "") | ascii_upcase ) == "CRITICAL"
              or (( ($r.properties."security-severity" // $r.properties.securitySeverity // $r.properties.severityScore // empty) | tonumber? ) // -1) >= 9
              or ( ($r.rule?.properties?.tags // []) | map(ascii_upcase) | any(. == "CRITICAL") );
            .runs as $runs
            | [
                .runs[]?.results[]?
                | . as $res
                | select( normsev($res) )
                | {
                    ruleId:      ($res.ruleId // $res.rule?.id // "unknown"),
                    title:       ($res.message?.text // "â€”"),
                    file:        ($res.locations[0]?.physicalLocation?.artifactLocation?.uri // "â€”"),
                    line:        ($res.locations[0]?.physicalLocation?.region?.startLine // 1),
                    help:        ($res.helpUri // $res.rule?.helpUri // ""),
                    cwe: (
                      $res.rule?.properties?.tags // []
                      | map(select(test("^cwe:", "i"))) | join(", ")
                    )
                  }
              ] as $items
            | "# ðŸ”´ Critical Findings\n"
            + (if ($items|length)==0
               then "_No critical findings found._\n"
               else
                 "| Rule | Title | Location | CWE | Help |\n|---|---|---|---|---|\n" +
                 ( $items
                   | map("| \(.ruleId) | \(.title|gsub("\\n";" ")) | \(.file):\(.line) | \(.cwe // "â€”") | \((.help // "")|tostring) |")
                   | join("\n")
                 ) + "\n"
               end)
          ' "$SARIF" > pr-critical.md

    - name: Find existing sticky comment
      id: fc
      uses: peter-evans/find-comment@v3
      with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: 'ðŸ”´ Critical Findings'   # anchor text to find

    - name: Create comment (if missing)
      if: steps.fc.outputs.comment-id == ''
      id: create
      uses: peter-evans/create-or-update-comment@v4
      with:
         issue-number: ${{ github.event.pull_request.number }}
         body-path: pr-critical.md

    - name: Update comment (if found)
      if: steps.fc.outputs.comment-id != ''
      uses: peter-evans/create-or-update-comment@v4
      with:
          comment-id: ${{ steps.fc.outputs.comment-id }}
          body-path: pr-critical.md
          edit-mode: replace
